#!/usr/bin/python

'''
This will track last reboot time and flag systems that have rebooted on their own
'''

# import modules

import subprocess
import time

# global varibles if any


# start functions

def get_last_reboot():
	'''use system control binary to read reboot time from kernel
	use sub process to grab that'''
	cmd = ['sysctl', '-h', 'kern.boottime']
	ps = subprocess.check_output(cmd) 
	output = ps.strip()
	output_list = output.split()
	epoch_reboot_date = output_list[4].replace(',','')
	# print epoch_reboot_date
	return epoch_reboot_date

def diff_times(reboot_time):
	'''get current epoch time to get a difference of seconds a system has been running'''
	current_epoch_time = int(time.time())
	epoch_since_reboot = current_epoch_time - int(reboot_time)
	return epoch_since_reboot

def get_days_reboot(seconds):
	'''return days since reboot'''
	#print seconds
	days = int(seconds) / 86400
	return days

def run():
	reboot = get_last_reboot()
	reboot_diff = diff_times(reboot)
	reboot_days = get_days_reboot(reboot_diff)
	print "<result>%s</result>" % reboot_days

run()
